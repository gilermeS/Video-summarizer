
from utils import api_utils, audio_utils
import streamlit as st
# import requests



st.set_page_config(page_title="SumarIA", page_icon="ü§ñ")




st.title("Bem vind@ √† :rainbow[SumarIA] :robot_face:", anchor=False)

st.subheader('Onde v√≠deos _muito_ chatos v√™m para serem resumidos', anchor=False)

st.markdown('Basta colar o link do v√≠deo (ou shorts!) _chat√£o_ do :red-background[Youtube] e voc√™ vai receber de volta a transcri√ß√£o e um resumo do que foi dito no v√≠deo.')

st.info('V√≠deos longos demoram mais e, como o resumo √© baseado na transcri√ß√£o, os v√≠deos precisam conter √°udio.')




# Sidebar (configura√ß√µes)
with st.sidebar:
    st.header("Configura√ß√µes adicionais :gear: :star2:")
    st.markdown('_Em breve..._')



# Campo para URL do YouTube
video_url = st.text_input("Cole a URL do YouTube:", key='url_input')


col1, col2 = st.columns(2)



if video_url:
    try:
        # Baixar √°udio do YouTube
        audio = audio_utils.download_youtube_audio(video_url)


        with col1:
            # Transcri√ß√£o com Whisper
            with st.spinner("Transcrevendo √°udio..."):
                transcribed = audio_utils.model.transcribe(audio, fp16=False)["text"]
            
            st.subheader("üìù Transcri√ß√£o")
            st.text_area("Texto transcrito:", api_utils.prettify(transcribed), height=200)



        with col2:
            # Resumo com DeepSeek
            with st.spinner("Gerando resumo..."):
                summary = api_utils.generate_summary(transcribed)
            
            st.subheader("üîç Resumo")
            st.write(summary)
            
            st.balloons()


    except Exception as e:
        st.error(f"Erro: {e}")

else:
    st.info("Cole uma URL do YouTube para come√ßar.")


